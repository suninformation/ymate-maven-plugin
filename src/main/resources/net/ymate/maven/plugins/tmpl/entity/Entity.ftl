package ${config.packageName}.${config.classSuffix?lower_case};

<#if (config.useStateSupport)>import net.ymate.platform.core.beans.annotation.PropertyState;</#if>
import net.ymate.platform.core.persistence.annotation.Comment;
import net.ymate.platform.core.persistence.annotation.Default;
import net.ymate.platform.core.persistence.annotation.Entity;
import net.ymate.platform.core.persistence.annotation.Id;
import net.ymate.platform.core.persistence.annotation.Property;
import net.ymate.platform.core.persistence.annotation.Readonly;<#if (!config.useBaseEntity)>
import net.ymate.platform.persistence.jdbc.support.BaseEntity;
import net.ymate.platform.core.persistence.IShardingable;
import net.ymate.platform.persistence.jdbc.IDatabaseConnectionHolder;</#if>

/**
 * ${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if> generated By EntityMojo on ${lastUpdateTime?string("yyyy/MM/dd HH:mm:ss")}
 *
 * @author YMP (https://www.ymate.net/)
 */
@Entity(${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if>.TABLE_NAME)
public class ${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if> extends <#if (config.useBaseEntity)>BaseEntity<${entityInfo.primaryKeyType}><#else>BaseEntity<${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if>, ${entityInfo.primaryKeyType}></#if> {

    private static final long serialVersionUID = 1L;

<#list entityInfo.fields as field>
    <#if entityInfo.primaryKeyName == field.varName>@Id</#if><#if (field.columnName!"undefined") != "undefined">
    @Property(name = FIELDS.${field.columnName?upper_case}<#if (field.autoIncrement)>, autoincrement=true</#if><#if (!field.nullable)>, nullable = false</#if><#if (!field.signed)>, unsigned = true</#if><#if (field.precision > 0)>, length = ${field.precision?string('#')}</#if><#if (field.scale > 0)>, decimals = ${field.scale}</#if>)<#if (field.defaultValue!"undefined") != "undefined">
    @Default("${field.defaultValue}")</#if><#if (field.remarks!"undefined") != "undefined">
    @Comment("${field.remarks}")</#if><#if (config.useStateSupport)>
    @PropertyState(propertyName = FIELDS.${field.columnName?upper_case})</#if><#if (field.readonly)>
    @Readonly</#if></#if>
    private ${field.varType} ${field.varName};

</#list>

    public ${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if>() {
    }

<#if (entityInfo.nonNullableFields?size > 0)>
    public ${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if>(<#list entityInfo.nonNullableFields as field>${field.varType} ${field.varName}<#if field_has_next>, </#if></#list>) {
    <#list entityInfo.nonNullableFields as field>
        this.${field.varName} = ${field.varName};
    </#list>
    }
</#if>

    public ${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if>(<#list entityInfo.fields as field>${field.varType} ${field.varName}<#if field_has_next>, </#if></#list>) {
    <#list entityInfo.fields as field>
        this.${field.varName} = ${field.varName};
    </#list>
    }

    @Override
    public ${entityInfo.primaryKeyType} getId() {
        return ${entityInfo.primaryKeyName};
    }

    @Override
    public void setId(${entityInfo.primaryKeyType} id) {
        this.${entityInfo.primaryKeyName} = id;
    }

<#list entityInfo.fields as field>
    <#if field.varName != 'id'>
    public ${field.varType} get${field.varName?cap_first}() {
        return ${field.varName};
    }

    public void set${field.varName?cap_first}(${field.varType} ${field.varName}) {
        this.${field.varName} = ${field.varName};
    }
    <#elseif field.varName != entityInfo.primaryKeyName>
    public ${field.varType} get_${field.varName?cap_first}() {
        return ${field.varName};
    }

    public void set_${field.varName?cap_first}(${field.varType} ${field.varName}) {
        this.${field.varName} = ${field.varName};
    }
    </#if>
</#list>

<#if (config.useChainMode)>
    public static ${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if>Builder builder() {
        return new ${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if>Builder();
    }

    public ${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if>Builder bind() {
        return new ${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if>Builder(this);
    }

    public static class ${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if>Builder {

        private ${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if> targetEntity;

        public ${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if>Builder() {
            targetEntity = new ${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if>();
        }

        public ${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if>Builder(${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if> targetEntity) {
            this.targetEntity = targetEntity;
        }

        public ${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if> build() {
            return targetEntity;
        }

    <#if (!config.useBaseEntity)>
        public IDatabaseConnectionHolder connectionHolder() {
            return targetEntity.getConnectionHolder();
        }

        public ${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if>Builder connectionHolder(IDatabaseConnectionHolder connectionHolder) {
            targetEntity.setConnectionHolder(connectionHolder);
            return this;
        }

        public String dataSourceName() {
            return targetEntity.getDataSourceName();
        }

        public ${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if>Builder dataSourceName(String dataSourceName) {
            targetEntity.setDataSourceName(dataSourceName);
            return this;
        }

        public IShardingable shardingable() {
            return targetEntity.getShardingable();
        }

        public ${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if>Builder shardingable(IShardingable shardingable) {
            targetEntity.setShardingable(shardingable);
            return this;
        }
    </#if>

    <#list entityInfo.fields as field>

        public ${field.varType} ${field.varName}() {
            return targetEntity.get${field.varName?cap_first}();
        }

        public ${entityInfo.name?cap_first}<#if (config.useClassSuffix)>${config.classSuffix?cap_first}</#if>Builder ${field.varName}(${field.varType} ${field.varName}) {
            targetEntity.set${field.varName?cap_first}(${field.varName});
            return this;
        }
    </#list>
    }
</#if>

    public interface FIELDS {
    <#list entityInfo.constFields as field>
        ${field.varType} ${field.varName} = "${field.columnName}";
    </#list>
    }

    public static final String TABLE_NAME = "${entityInfo.tableName}";
}
