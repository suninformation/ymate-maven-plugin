package ${packageName};

import ${packageName}.impl.Default${moduleName?cap_first}Config;
import net.ymate.platform.core.IApplication;
import net.ymate.platform.core.YMP;
import net.ymate.platform.core.module.IModule;
import net.ymate.platform.core.module.IModuleConfigurer;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * ${moduleName?cap_first} generated By ModuleMojo on ${.now?string("yyyy/MM/dd HH:mm")}
 *
 * @author YMP (https://www.ymate.net/)
 */
public class ${moduleName?cap_first} implements IModule, I${moduleName?cap_first} {

    private static final Log LOG = LogFactory.getLog(${moduleName?cap_first}.class);

    private static volatile I${moduleName?cap_first} instance;

    private IApplication owner;

    private I${moduleName?cap_first}Config config;

    private boolean initialized;

    public static I${moduleName?cap_first} get() {
        I${moduleName?cap_first} inst = instance;
        if (inst == null) {
            synchronized (${moduleName?cap_first}.class) {
                inst = instance;
                if (inst == null) {
                    instance = inst = YMP.get().getModuleManager().getModule(${moduleName?cap_first}.class);
                }
            }
        }
        return inst;
    }

    @Override
    public String getName() {
        return MODULE_NAME;
    }

    @Override
    public void initialize(IApplication owner) throws Exception {
        if (!initialized) {
            //
            YMP.showModuleVersion("${moduleArtifactId}-${moduleName?lower_case}", this);
            //
            this.owner = owner;
            if (config == null) {
                IModuleConfigurer moduleConfigurer = owner.getConfigurer().getModuleConfigurer(MODULE_NAME);
                config = moduleConfigurer == null ? Default${moduleName?cap_first}Config.defaultConfig() : Default${moduleName?cap_first}Config.create(moduleConfigurer);
            }
            if (!config.isInitialized()) {
                config.initialize(this);
            }
            if (config.isEnabled()) {
                // TODO What to do?
            }
            initialized = true;
        }
    }

    @Override
    public boolean isInitialized() {
        return initialized;
    }

    @Override
    public void close() throws Exception {
        if (initialized) {
            initialized = false;
            //
            config = null;
            owner = null;
        }
    }

    @Override
    public IApplication getOwner() {
        return owner;
    }

    @Override
    public I${moduleName?cap_first}Config getConfig() {
        return config;
    }
}
